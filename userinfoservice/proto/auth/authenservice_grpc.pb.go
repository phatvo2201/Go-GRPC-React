// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AuthenServiceClient is the client API for AuthenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenServiceClient interface {
	SignUpUser(ctx context.Context, in *SignUpUserRequest, opts ...grpc.CallOption) (*SignUpUserResponse, error)
	SignInUser(ctx context.Context, in *SignInUserRequest, opts ...grpc.CallOption) (*SignInUserResponse, error)
	RefreshToken(ctx context.Context, in *RefrehEmpty, opts ...grpc.CallOption) (*SignInUserResponse, error)
}

type authenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenServiceClient(cc grpc.ClientConnInterface) AuthenServiceClient {
	return &authenServiceClient{cc}
}

func (c *authenServiceClient) SignUpUser(ctx context.Context, in *SignUpUserRequest, opts ...grpc.CallOption) (*SignUpUserResponse, error) {
	out := new(SignUpUserResponse)
	err := c.cc.Invoke(ctx, "/pb.AuthenService/SignUpUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenServiceClient) SignInUser(ctx context.Context, in *SignInUserRequest, opts ...grpc.CallOption) (*SignInUserResponse, error) {
	out := new(SignInUserResponse)
	err := c.cc.Invoke(ctx, "/pb.AuthenService/SignInUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenServiceClient) RefreshToken(ctx context.Context, in *RefrehEmpty, opts ...grpc.CallOption) (*SignInUserResponse, error) {
	out := new(SignInUserResponse)
	err := c.cc.Invoke(ctx, "/pb.AuthenService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenServiceServer is the server API for AuthenService service.
// All implementations must embed UnimplementedAuthenServiceServer
// for forward compatibility
type AuthenServiceServer interface {
	SignUpUser(context.Context, *SignUpUserRequest) (*SignUpUserResponse, error)
	SignInUser(context.Context, *SignInUserRequest) (*SignInUserResponse, error)
	RefreshToken(context.Context, *RefrehEmpty) (*SignInUserResponse, error)
	mustEmbedUnimplementedAuthenServiceServer()
}

// UnimplementedAuthenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenServiceServer struct {
}

func (UnimplementedAuthenServiceServer) SignUpUser(context.Context, *SignUpUserRequest) (*SignUpUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpUser not implemented")
}
func (UnimplementedAuthenServiceServer) SignInUser(context.Context, *SignInUserRequest) (*SignInUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInUser not implemented")
}
func (UnimplementedAuthenServiceServer) RefreshToken(context.Context, *RefrehEmpty) (*SignInUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthenServiceServer) mustEmbedUnimplementedAuthenServiceServer() {}

// UnsafeAuthenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenServiceServer will
// result in compilation errors.
type UnsafeAuthenServiceServer interface {
	mustEmbedUnimplementedAuthenServiceServer()
}

func RegisterAuthenServiceServer(s *grpc.Server, srv AuthenServiceServer) {
	s.RegisterService(&_AuthenService_serviceDesc, srv)
}

func _AuthenService_SignUpUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServiceServer).SignUpUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthenService/SignUpUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServiceServer).SignUpUser(ctx, req.(*SignUpUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenService_SignInUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServiceServer).SignInUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthenService/SignInUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServiceServer).SignInUser(ctx, req.(*SignInUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefrehEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthenService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServiceServer).RefreshToken(ctx, req.(*RefrehEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AuthenService",
	HandlerType: (*AuthenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUpUser",
			Handler:    _AuthenService_SignUpUser_Handler,
		},
		{
			MethodName: "SignInUser",
			Handler:    _AuthenService_SignInUser_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthenService_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/authenservice.proto",
}
